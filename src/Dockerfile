# Начните с официального образа Python, который будет основой для образа приложения.
FROM python:3.11

# Укажите, что в дальнейшем команды запускаемые в контейнере, будут выполняться в директории /code.
  #
  #Инструкция создаст эту директорию внутри контейнера и мы поместим в неё файл requirements.txt и директорию app.
WORKDIR /code

# Скопируете файл с зависимостями из текущей директории в /code.
#Сначала копируйте только файл с зависимостями.
#Этот файл изменяется довольно редко, Docker ищет изменения при постройке образа и если не находит,
#то использует кэш, в котором хранятся предыдущие версии сборки образа.
COPY requirements.txt /code/requirements.txt

#Установите библиотеки перечисленные в файле с зависимостями.
#Опция --no-cache-dir указывает pip не сохранять загружаемые библиотеки на локальной машине
#для использования их в случае повторной загрузки.
#В контейнере, в случае пересборки этого шага, они всё равно будут удалены.
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

#Скопируйте директорию ./app внутрь директории /code (в контейнере).
#Так как в этой директории расположен код, который часто изменяется, то использование кэша на этом шаге будет наименее эффективно,  \
#а значит лучше поместить этот шаг ближе к концу Dockerfile, дабы не терять выгоду от оптимизации предыдущих шагов.
COPY app /code/app

# Укажите команду, запускающую сервер uvicorn.
  #
  #CMD принимает список строк, разделённых запятыми, но при выполнении объединит их через пробел,
  #собрав из них одну команду, которую вы могли бы написать в терминале.
  #
  #Эта команда будет выполнена в текущей рабочей директории, а именно в директории /code, которая указана в команде WORKDIR /code.
  #
  #Так как команда выполняется внутри директории /code, в которую мы поместили папку ./app с приложением,
  #то Uvicorn сможет найти и импортировать объект app из файла app.main.
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]